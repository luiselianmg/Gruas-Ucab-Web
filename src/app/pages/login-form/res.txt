import { Component, inject, signal } from '@angular/core';
import { MatButtonModule } from '@angular/material/button';
import { ReactiveFormsModule, FormControl, FormGroup, Validators } from '@angular/forms';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import {MatCardModule} from '@angular/material/card';
import {MatDividerModule} from '@angular/material/divider';
import { MatSnackBarModule } from '@angular/material/snack-bar';
import {MatTabsModule} from '@angular/material/tabs';
import {MatIconModule} from '@angular/material/icon';
import { Router } from '@angular/router';
import {merge} from 'rxjs';
import {takeUntilDestroyed} from '@angular/core/rxjs-interop';
import { LocalserviceuserService } from '../../service/localserviceuser.service';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [ReactiveFormsModule, MatButtonModule, MatFormFieldModule, MatInputModule, MatCardModule, MatDividerModule, MatSnackBarModule, MatTabsModule, MatIconModule, FormsModule],
  templateUrl: './login-form.component.html',
  styleUrl: './login-form.component.scss'
})

export class LoginFormComponent {
  readonly email = new FormControl('', [Validators.required, Validators.email]);
  readonly password = new FormControl('', [Validators.required]);
  errorMessage = signal('');

  constructor() {
    merge(this.email.statusChanges, this.email.valueChanges)
      .pipe(takeUntilDestroyed())
      .subscribe(() => this.updateErrorMessageEmail()  
    );
  }
  
  //hide password
   hide = signal(true);
  clickEvent(event: MouseEvent) {
    this.hide.set(!this.hide());
    event.stopPropagation();
  }
  
  //error message para el email
  updateErrorMessageEmail() {
    if (this.email.hasError('required')) {
      this.errorMessage.set('You must enter a value');
    } else if (this.email.hasError('email')) {
      this.errorMessage.set('Not a valid email');
    } else {
      this.errorMessage.set('');
    }
  }
  
  //error message para el password
  updateErrorMessagePassword() {
    if (this.email.hasError('required')) {
      this.errorMessage.set('You must enter a value');
    }  else this.errorMessage.set('');
    
  }
 
  login = {
    email: '',
    password: '',
  };
 
  private localuserService = inject(LocalserviceuserService);
  private router = inject(Router);
  
  onLogin() {
    const { email, password } = this.login;
      /**
       * @param response List of users that match the email and password
       *                 entered by the user. If the list is not empty, the
       *                 email is stored in session storage and the user is
       *                 redirected to the dashboard.
       */
    this.localuserService.getUserCredentials(email, password).subscribe({
      next: (response) => {
        if (response.length >= 1) {
          sessionStorage.setItem('email', email);
          this.router.navigate(['dashboard']);
        } 
      },

    });
  }
}

<div class="content" >
  <mat-card class="card "  appearance="raised"   >

    <mat-card-header  >
      <mat-card-title > <h2>Login</h2></mat-card-title  >
      <mat-card-subtitle> <H3>GRUAS-UCAB</H3></mat-card-subtitle>
    </mat-card-header>

    <mat-card-content   >



          <mat-form-field class="form-full-width"  appearance="outline" >
            <mat-label for="email">Enter your email</mat-label>
            <input
             matInput
             placeholder="pat@example.com"
             [formControl]="email"
             type="email"
             id = "typemail"
             pInputText
             [(ngModel)]="login.email"
             id="email"
             name="email"

             (blur)="updateErrorMessageEmail()"
             required
             />
             @if (email.invalid) {
              <mat-error>{{errorMessage()}}</mat-error>
            }
            <mat-icon matSuffix>email</mat-icon>
          </mat-form-field>

          <mat-form-field class="form-full-width" appearance="outline"  >
            <mat-label for="password">Enter your password</mat-label>
            <input
            matInput
            [type]="hide() ? 'password' : 'text'"
            [formControl]="password"
            type="password"
            id = "typepassword"
            [(ngModel)]="login.password"
            inputId="password"
            name="password"

             (blur)="updateErrorMessagePassword()"
             required
             />
             @if (password.invalid) {
              <mat-error>{{errorMessage()}}</mat-error>
            }
            <button
             mat-icon-button
             matSuffix

             (click)="clickEvent($event)"
             [attr.aria-label]="'Hide password'"
             [attr.aria-pressed]="hide()"
             >
             <mat-icon class="icon-pass" >{{hide() ? 'visibility_off' : 'visibility'}}</mat-icon>
             </button>
          </mat-form-field>

          <button
          class="button-login"
          mat-raised-button
          type="submit"
          (click)="onLogin()" [disabled]="email.invalid || password.invalid">
          Login
        </button>


    </mat-card-content>

  </mat-card>
</div>



@use '@angular/material' as mat;

:root {
  @include mat.card-overrides((
    title-text-font:"Roboto Condensed"
  ));
}
.button-login {
  width: 100%;

  -webkit-text-fill-color:var(--primary-dark-color);
  @include mat.button-overrides((
    disabled-container-color :var(--secondary-dark-color),
    container-color: var(--secondary-color)
  ));
}

.content {

  height: 100vh;

  align-content: center;
}




.card {
  max-width: 400px;
  background-color: var(--background2-color);
  margin-left: 470px;
}


mat-card-header{
  align-self: center;
mat-card-title {

text-align: center;
}
}



.form-full-width {
  margin: 15px;
  display: flex;

}


.form-full-width {

  @include mat.form-field-overrides((
    input-text-color: var(--secondary-dark-color),
    focus-label-text-color: var(--secondary-dark-color),
    outline-color:var(--secondary-dark-color),
    focus-outline-color: var(--secondary-dark-color),
    trailing-icon-color: var(--secondary-dark-color)
  ));

.icon-pass{
  color: var(--secondary-dark-color);
}

}


